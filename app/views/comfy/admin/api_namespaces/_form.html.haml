= form_for @api_namespace, html: {multipart: true} do |f|
  - if @api_namespace.errors.any?
    #error_explanation
      %h2= "#{pluralize(@api_namespace.errors.count, "error")} prohibited this api_namespace from being saved:"
      %ul
        - @api_namespace.errors.full_messages.each do |message|
          %li= message

  .field
    = f.label :name
    = f.text_field :name
  .field
    = f.label :version
    = f.number_field :version
  #jsoneditor
  = f.hidden_field :properties

  .non-primitve-properties.mb-4
    .h4.mt-3
      Non-primitve types:

    .form-group#non_primitive_forms
      = f.fields_for :non_primitive_properties, @api_namespace.non_primitive_properties do |ff|
        = render partial: 'comfy/admin/non_primitive_properties/nested_form', locals: {index: ff.index, resource: ff.object }
    %a.btn.btn-primary.text-white{onclick: "appendNonPrimitiveForm()"}
      %i.fa.fa-plus

  .field
    = f.label :requires_authentication
    = f.check_box :requires_authentication
  .field
    = f.label :has_form
    = f.check_box :has_form, checked: @api_namespace.api_form.present?
  .field
    = f.label :namespace_type
    = f.text_field :namespace_type

  .api_actions.my-4
    .h4.mt-3
      Api Actions:
    - ApiAction.children.each do |subclass|
      .mb-5
        .h5.mb-3
          Trigger Event: 
          = subclass.split('_api_actions').first
        .form-group{id: "#{subclass}_forms", class: "js-sortable"}
          = f.fields_for subclass, @api_namespace.send(subclass) do |ff|
            = render partial: 'comfy/admin/api_actions/form', locals: {index: ff.index, resource: ff.object, type: subclass }
        %a.btn.btn-primary.text-white{onclick: "appendApiActionForm('#{subclass}')"}
          %i.fa.fa-plus

  .actions
    = f.submit 'Save'


= render 'init_editor'

:javascript
  function manageEvent(index) {
   var fieldType = $("#field_type_field_" + index).val();
   if (fieldType === 'file') {
     $("#file_field_" + index).show();
     $("#rich_text_field_" + index).hide();
   } else if (fieldType === 'richtext') {
     $("#file_field_" + index).hide();
     $("#rich_text_field_" + index).show();
   }
  }

  function toggleApiActionFields(index, type) {
    var fieldType = $("#action_type_field_" + index).val();
    hideAllFields(index, type)
    if (fieldType === 'send_email') {
      $("#send_email_fields_" + type + '_' + index).show();
    } else if (fieldType === 'redirect') {
      $("#redirect_fields_" + type + '_' + index).show();
    } else if (fieldType === 'serve_file') {
      $("#serve_file_fields_" + type + '_' + index).show();
    } else if (fieldType === 'send_web_request') {
      $("#serve_web_request_fields_" + type + '_' + index).show();
    }
  }

  function hideAllFields(index, type) {
    $("#send_email_fields_" + type + '_' + index).hide();
    $("#redirect_fields_" + type + '_'  + index).hide();
    $("#serve_file_fields_" + type + '_' + index).hide();
    $("#serve_web_request_fields_" + type + '_' + index).hide();
  }

  function removeForm(form_id, destroy_field_id) {
    $("#" + form_id).hide();
    $("#" + destroy_field_id).val(true)
  }

  function appendNonPrimitiveForm() {
    var index = $("#non_primitive_forms > .form-container").length
    var url = "#{new_non_primitive_property_path()}" + `?index=${index}`
    $.ajax({
      url: url ,
      type: 'GET',
      dataType: 'script',
      contentType: "application/html",
      success: function(response) {}
    });
  }

  function appendApiActionForm(type) {
    var index = $("#" + `${type}_forms > .form-container`).length
    var url = "#{new_api_action_path()}" + `?index=${index}&type=${type}` 
    $.ajax({
      url: url ,
      type: 'GET',
      dataType: 'script',
      contentType: "application/html",
      success: function(response) {}
    });
  }