- action = @api_form.persisted? ? :put : :post
- path = @api_form.persisted? ? api_namespace_api_form_path(api_namespace_id: @api_form.api_namespace.id, id: @api_form.id) : api_namespace_api_forms_path(api_namespace_id: @api_client.api_namespace.id)
- properties = @api_form.properties

= form_for @api_form, url: path, method: action do |f|
  - if @api_form.errors.any?
    #error_explanation
      %h2= "#{pluralize(@api_form.errors.count, "error")} prohibited this api_form from being saved:"
      %ul
        - @api_form.errors.full_messages.each do |message|
          %li= message

  .form-group
    = f.label :title
    = f.text_field :title, class: 'form-control'
  .my-5
    %h3.my-2 
      Messages
    .form-group
      = f.label :success_message
      = f.text_field :success_message, class: 'form-control'
    .form-group
      = f.label :failure_message
      = f.text_field :failure_message, class: 'form-control'

  %h3 Fields
  .row
    = f.fields_for :properties do |p|
      - JSON.parse(@api_namespace.properties).each do |key, value|
        .col-12.col-md-4.mb-4
          .card.p-3
            %h4.mb-3
              = key
            .form-group.d-flex.align-items-baseline
              .mr-4
                = 'Data type:'
              %div
                = value.class.to_s
            .form-group.d-flex.align-items-baseline
              .mr-4
                = 'Input Field Type: '
              %div
                = map_form_field_type(value.class.to_s)
            = p.fields_for key do |a|
              .row.mb-3.align-items-end
                .form-group.col-12
                  = a.label :label, 'Label:', class: 'mr-4'
                  = a.text_field :label, class: 'form-control', value: properties[key]["label"]
                - unless value.class.to_s == 'Array'
                  .form-group.col-12
                    = a.label :prepopulate, 'Prepopulate:', class: 'mr-4'
                    = a.check_box :prepopulate, checked: properties[key]["prepopulate"] == '1'
                - if value.class.to_s == 'String'
                  .form-group.col-12
                    = a.label :field_type, 'Field type', class: 'mr-4'
                    = a.select :field_type, options_for_select(['input', 'textarea'], properties[key]["field_type"] || 'input'), {}, {class: 'form-control' }
                  .form-group.col-12
                    = a.label :type_validation, 'Type validation', class: 'mr-4'
                    = a.select :type_validation, options_for_select(ApiForm::INPUT_TYPE, properties[key]["type_validation"] || 'text'), {}, {class: 'form-control', onchange: "toggleRegex(this , '#{key}_regex')" }
                  .form-group.col-12{style: "#{'display: none' unless properties[key]["type_validation"] == 'REGEX pattern' }", id: "#{key}_regex"}
                    = a.label :pattern, 'REGEX Pattern', class: 'mr-4'
                    = a.text_field :pattern, class: 'form-control', value: properties[key]["pattern"], placeholder: '[A-Za-z]{3}'
                    .mt-2.form-control-sm.pl-0
                      Regex editor:
                      = link_to 'Rubular', "https://rubular.com/", {target: '_blank'}
                - if value.class.to_s == 'Array'
                  .form-group.col-12
                    = a.label :select_type, 'Select Type:', class: 'mr-4'
                    = a.select :select_type, options_for_select(['single', 'multi']), {}, {class: "form-control"}
                  .form-group.col-12
                    = a.label :prepopulated_options, 'Prepopulate Options:', class: 'mr-4'
                    = a.select key, options_for_select(value), { multiple: true }, {class: "form-control array_select", name: "api_form[properties][#{key}][prepopulated_options][]", default_value: properties[key]["prepopulated_options"] ? properties[key]["prepopulated_options"].to_s : [].to_s}
                  .form-group.col-12
                    = a.label :placeholder, 'Placeholder:', class: 'mr-4'
                    = a.text_field :placeholder, class: 'form-control', value: properties[key]["placeholder"]

                .form-group.col-12
                  = a.label :required, 'Required:', class: 'mr-4'
                  = a.check_box :required, checked: properties[key]["required"] == "1"
      
      - @api_namespace.non_primitive_properties.each do |prop|
        .col-12.col-md-4.mb-4
          .card.p-3
            %h4.mb-3
              = prop.label
            .form-group.d-flex.align-items-baseline
              .mr-4
                = 'Data type:'
              %div
                = prop.field_type
            = p.fields_for prop.label do |a|
              .row.mb-3.align-items-end
                .form-group.col-12
                  = a.label :prepopulate, 'Prepopulate:', class: 'mr-4'
                  = a.check_box :prepopulate, checked: properties[prop.label]["prepopulate"] == '1'
                .form-group.col-12
                  = a.label :required, 'Required:', class: 'mr-4'
                  = a.check_box :required, checked: properties[prop.label]["required"] == '1'

        
  %h3.mt-4
    Button
  .form-group
    = f.label :submit_button_label
    = f.text_field :submit_button_label, class: 'form-control'

  .form-group.mt-4
    = f.label :show_recaptcha
    = f.check_box :show_recaptcha
    
  .actions
    = f.submit 'Save', class: 'btn btn-primary'

:javascript
  $(document).ready( function() {
    $(".array_select").select2({
      multiple: true,
      required: false,
      tags: true,
      placeholder: "Leave empty if you don't want to prepopulate"
    })
    $('.array_select').each(function() {
      $(this).val(JSON.parse($(this).attr('default_value'))).change();
    })
  });


  function toggleRegex(select, regexFieldId) {
    var type = $(select).val();
    if (type === 'REGEX pattern') {
      $('#' + regexFieldId).show();
    } else {
      $('#' + regexFieldId).hide();
    }
  }


